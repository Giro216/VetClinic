# VetClinicRequests.http
# Файл с HTTP-запросами для тестирования MedCardController и PetController
# Предполагаемый базовый URL: http://localhost:8080
# Используйте в IntelliJ IDEA HTTP Client, Postman или cURL

### Получение всех медицинских карт
# Ожидаемый ответ: 200 OK, список всех MedCard в формате JSON
GET http://localhost:8080/api/cards/all
Accept: application/json

###

### Получение медицинской карты по ID (существующий ID)
# Замените card1 на действительный ID медицинской карты из вашей базы данных
# Ожидаемый ответ: 200 OK, объект MedCard в формате JSON
GET http://localhost:8080/api/cards/card1
Accept: application/json

###

### Получение медицинской карты по ID (несуществующий ID)
# Замените nonexistent на ID, которого нет в базе данных
# Ожидаемый ответ: 404 Not Found
GET http://localhost:8080/api/cards/nonexistent
Accept: application/json

###

### Создание новой медицинской карты
# Ожидаемый ответ: 200 OK, созданный объект MedCard в формате JSON
POST http://localhost:8080/api/cards
Content-Type: application/json
Accept: application/json

{
  "id": "card2",
  "petId": "pet1",
  "records": ["Initial medical record"]
}

###

### Обновление медицинской карты
# Замените card1 на действительный ID медицинской карты
# Ожидаемый ответ: 200 OK, обновленный объект MedCard в формате JSON
PUT http://localhost:8080/api/cards/card1
Content-Type: application/json
Accept: application/json

{
  "id": "card1",
  "petId": "pet1",
  "records": ["Updated record"]
}

###

### Получение всех питомцев
# Ожидаемый ответ: 200 OK, список всех Pet в формате JSON
GET http://localhost:8080/api/pets/all
Accept: application/jso

###

### Получение питомца по ID (существующий ID)
# Замените pet1 на действительный ID питомца из вашей базы данных
# Ожидаемый ответ: 200 OK, объект Pet в формате JSON
GET http://localhost:8080/api/pets/pet1
Accept: application/json

###

### Получение питомца по ID (несуществующий ID)
# Замените nonexistent на ID, которого нет в базе данных
# Ожидаемый ответ: 404 Not Found
GET http://localhost:8080/api/pets/nonexistent
Accept: application/json

###

### Создание нового питомца
# Ожидаемый ответ: 200 OK, созданный объект Pet в формате JSON
POST http://localhost:8080/api/pets
Content-Type: application/json
Accept: application/json

{
  "petId": "pet2",
  "name": "Buddy",
  "species": "Dog",
  "breed": "Golden Retriever",
  "age": 3
}

###

### Обновление питомца
# Замените pet1 на действительный ID питомца
# Ожидаемый ответ: 200 OK, обновленный объект Pet в формате JSON
PUT http://localhost:8080/api/pets/pet1
Content-Type: application/json
Accept: application/json

{
  "petId": "pet1",
  "name": "Max",
  "species": "Dog",
  "breed": "Labrador",
  "age": 4
}

###

### Удаление питомца
# Замените pet1 на действительный ID питомца
# Ожидаемый ответ: 204 No Content
DELETE http://localhost:8080/api/pets/pet1
Accept: application/json
openapi: 3.0.3
info:
  title: PetCare Recommendation Service API
  version: 1.0.0
servers:
  - url: http://recommendation-service:8080/api/v1
  - url: http://localhost:8080/api/v1

paths:
  # --- Pet CRUD ---
  /users/{userId}/pets:
    post: # Существующий
      tags: [ Pet ]
      summary: Создать питомца для пользователя
      operationId: createPetForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPetCreateRequestDto'
      responses:
        '201':
          description: Питомец создан
          headers:
            Location:
              description: URI нового питомца
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserPetResponseDto"
        '400':
          $ref: '#/components/responses/BadRequest'
        # '404': # Если проверяем userId
        #   $ref: '#/components/responses/NotFound'
    get: # Новый GET List
      tags: [ Pet ]
      summary: Получить список питомцев пользователя
      operationId: getPetsForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Список питомцев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserPetResponseDto"
        # '404': # Если проверяем userId
        #   $ref: '#/components/responses/NotFound'

  /users/{userId}/pets/{petId}:
    get: # Новый GET Single
      tags: [ Pet ]
      summary: Получить питомца по ID
      operationId: getPetByIdForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: petId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Питомец найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPetResponseDto'
        '404':
          $ref: '#/components/responses/NotFound' # Pet или User не найден
    patch: # Новый PATCH
      tags: [ Pet ]
      summary: Обновить информацию о питомце
      operationId: updatePetForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: petId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPetUpdateRequestDto'
      responses:
        '200':
          description: Питомец обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPetResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound' # Pet или User не найден

  # --- Care Tips Recommendations (Read-Only for Pet) ---
  /pets/{petId}/care-tips:
    get: # Существующий
      tags: [ Care Tips Recommendations ]
      summary: Получить персонализированные советы по уходу для питомца
      operationId: getCareTipsForPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список советов по уходу
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CareTipResponseDto'
        '404':
          $ref: '#/components/responses/NotFound' # Pet не найден

  # --- Care Tips Admin CRUD ---
  /admin/care-tips:
    post: # Новый
      tags: [ Care Tips Admin ]
      summary: Создать новый совет по уходу (Admin)
      operationId: createCareTip
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CareTipCreateRequestDto'
      responses:
        '201':
          description: Совет создан
          headers:
            Location:
              description: URI нового совета
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareTipResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
    get: # Новый
      tags: [ Care Tips Admin ]
      summary: Получить все советы по уходу (Admin)
      operationId: getAllCareTips
      responses:
        '200':
          description: Список всех советов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CareTipResponseDto'

  /admin/care-tips/{tipId}:
    get: # Новый
      tags: [ Care Tips Admin ]
      summary: Получить совет по уходу по ID (Admin)
      operationId: getCareTipById
      parameters:
        - name: tipId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Совет найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareTipResponseDto'
        '404':
          $ref: '#/components/responses/NotFound'
    patch: # Новый
      tags: [ Care Tips Admin ]
      summary: Обновить совет по уходу (Admin)
      operationId: updateCareTip
      parameters:
        - name: tipId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CareTipUpdateRequestDto'
      responses:
        '200':
          description: Совет обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CareTipResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete: # Новый
      tags: [ Care Tips Admin ]
      summary: Удалить совет по уходу (Admin)
      operationId: deleteCareTip
      parameters:
        - name: tipId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound'

  # --- Food Recommendations (Read-Only for Pet) ---
  /pets/{petId}/food-recommendations:
    get: # Существующий
      tags: [ Food Recommendations ]
      summary: Получить рекомендации по корму для конкретного питомца
      operationId: getFoodRecommendationsForPet
      parameters:
        - name: petId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Список подходящих кормов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodRecommendationResponseDto'
        '404':
          $ref: '#/components/responses/NotFound' # Pet не найден

  # --- Food Admin CRUD ---
  /admin/food:
    post: # Новый
      tags: [ Food Admin ]
      summary: Создать новый корм (Admin)
      operationId: createFood
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodCreateRequestDto'
      responses:
        '201':
          description: Корм создан
          headers:
            Location:
              description: URI нового корма
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodRecommendationResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
    get: # Новый
      tags: [ Food Admin ]
      summary: Получить все корма (Admin)
      operationId: getAllFood
      responses:
        '200':
          description: Список всех кормов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodRecommendationResponseDto'

  /admin/food/{foodId}:
    get: # Новый
      tags: [ Food Admin ]
      summary: Получить корм по ID (Admin)
      operationId: getFoodById
      parameters:
        - name: foodId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Корм найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodRecommendationResponseDto'
        '404':
          $ref: '#/components/responses/NotFound'
    patch: # Новый
      tags: [ Food Admin ]
      summary: Обновить корм (Admin)
      operationId: updateFood
      parameters:
        - name: foodId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FoodUpdateRequestDto'
      responses:
        '200':
          description: Корм обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoodRecommendationResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete: # Новый
      tags: [ Food Admin ]
      summary: Удалить корм (Admin)
      operationId: deleteFood
      parameters:
        - name: foodId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound'

  # --- Reminders (уже есть CRUD) ---
  /users/{userId}/reminders:
    get:
      tags: [ Reminders ]
      summary: Получить напоминания об уходе для питомцев пользователя
      operationId: getRemindersForUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/ReminderStatus'
      responses:
        '200':
          description: Список напоминаний
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReminderResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        # '404': # Если проверяем userId
        #   $ref: '#/components/responses/NotFound'

    post:
      tags: [ Reminders ]
      summary: Создать напоминание об уходе
      operationId: createReminder
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReminderCreationRequestDto'
      responses:
        '201':
          description: Напоминание создано
          headers:
            Location:
              description: URI нового напоминания
              schema:
                type: string
                format: uri
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReminderResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound' # Pet или User не найден

  /users/{userId}/reminders/{reminderId}:
    get:
      tags: [ Reminders ]
      summary: Получить напоминание по ID
      operationId: getReminderById
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: reminderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Напоминание найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReminderResponseDto'
        '404':
          $ref: '#/components/responses/NotFound' # Reminder/Pet/User не найден

    patch:
      tags: [ Reminders ]
      summary: Обновить напоминание
      operationId: updateReminder
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: reminderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReminderUpdateRequestDto'
      responses:
        '200':
          description: Напоминание обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReminderResponseDto'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound' # Reminder/Pet/User не найден

    delete:
      tags: [ Reminders ]
      summary: Удалить напоминание об уходе
      operationId: deleteReminder
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: reminderId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound' # Reminder/Pet/User не найден

components:
  schemas:
    # --- Response DTOs ---
    CareTipResponseDto:
      type: object
      properties:
        tipId:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
        content:
          type: string
        category:
          type: string
        minAgeMonths:
          type: integer
          format: int32
          nullable: true
        maxAgeMonths:
          type: integer
          format: int32
          nullable: true
        # Связи не включаем в ответ по умолчанию, можно добавить при необходимости
        # applicableSpeciesNames:
        #   type: array
        #   items:
        #     type: string
        # applicableBreedNames:
        #   type: array
        #   items:
        #     type: string
        # relevantAllergyNames:
        #   type: array
        #   items:
        #     type: string


    FoodRecommendationResponseDto: # Переиспользуем для GET /admin/food
      type: object
      properties:
        foodId:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
        brand:
          type: string
        description:
          type: string
          nullable: true
        minAgeMonths:
          type: integer
          format: int32
          nullable: true
        maxAgeMonths:
          type: integer
          format: int32
          nullable: true
        # Связи не включаем в ответ по умолчанию
        # targetSpeciesNames:
        #   type: array
        #   items:
        #     type: string
        # targetBreedNames:
        #   type: array
        #   items:
        #     type: string
        # ingredientNames:
        #   type: array
        #   items:
        #     type: string

    ReminderResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        petId:
          type: string
          format: uuid
          readOnly: true
        petName:
          type: string
          readOnly: true
        dueDate:
          type: string
          format: date
        type:
          type: string
        description:
          type: string
          nullable: true
        status:
          $ref: '#/components/schemas/ReminderStatus'

    UserPetResponseDto:
      type: object
      properties:
        petId:
          type: string
          format: uuid
          readOnly: true
        ownerId:
          type: integer
          format: int64
          readOnly: true
        name:
          type: string
        birthDate:
          type: string
          format: date
          nullable: true
        speciesName:
          type: string
        breedName:
          type: string
          nullable: true
        allergyNames:
          type: array
          items:
            type: string # Просто массив строк
          description: Список названий аллергий

    # --- Enums ---
    ReminderStatus:
      type: string
      enum: [ PENDING, COMPLETED, SKIPPED ]

    # --- Request DTOs ---
    CareTipCreateRequestDto:
      type: object
      required:
        - title
        - content
        - category
      properties:
        title:
          type: string
          maxLength: 255
        content:
          type: string
        category:
          type: string
          maxLength: 100
        minAgeMonths:
          type: integer
          format: int32
          minimum: 0
          nullable: true
        maxAgeMonths:
          type: integer
          format: int32
          minimum: 0
          nullable: true
        applicableSpeciesNames:
          type: array
          items:
            type: string
            maxLength: 100
          description: Названия видов, к которым применим совет
        applicableBreedNames:
          type: array
          items:
            type: string
            maxLength: 100
          description: Названия пород, к которым применим совет (опционально, сужает виды)
        relevantAllergyNames:
          type: array
          items:
            type: string
            maxLength: 100
          description: Названия аллергий, для которых релевантен совет (опционально)

    CareTipUpdateRequestDto:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          nullable: true
        content:
          type: string
          nullable: true
        category:
          type: string
          maxLength: 100
          nullable: true
        minAgeMonths:
          type: integer
          format: int32
          minimum: 0
          nullable: true # null - не менять, 0 - установить
        maxAgeMonths:
          type: integer
          format: int32
          minimum: 0
          nullable: true # null - не менять
        applicableSpeciesNames:
          type: array
          items:
            type: string
            maxLength: 100
          nullable: true # null - не менять, [] - очистить, [...] - установить
          description: Полный новый список названий видов
        applicableBreedNames:
          type: array
          items:
            type: string
            maxLength: 100
          nullable: true # null - не менять, [] - очистить, [...] - установить
          description: Полный новый список названий пород
        relevantAllergyNames:
          type: array
          items:
            type: string
            maxLength: 100
          nullable: true # null - не менять, [] - очистить, [...] - установить
          description: Полный новый список названий релевантных аллергий

    FoodCreateRequestDto:
      type: object
      required:
        - name
        - brand
      properties:
        name:
          type: string
          maxLength: 150
        brand:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
          nullable: true
        minAgeMonths:
          type: integer
          format: int32
          minimum: 0
          nullable: true
        maxAgeMonths:
          type: integer
          format: int32
          minimum: 0
          nullable: true
        targetSpeciesNames:
          type: array
          items:
            type: string
            maxLength: 100
          description: Названия видов, для которых предназначен корм
        targetBreedNames:
          type: array
          items:
            type: string
            maxLength: 100
          description: Названия пород, для которых предназначен корм (опционально)
        ingredientNames:
          type: array
          items:
            type: string
            maxLength: 100
          description: Названия ингредиентов, содержащихся в корме

    FoodUpdateRequestDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 150
          nullable: true
        brand:
          type: string
          maxLength: 100
          nullable: true
        description:
          type: string
          maxLength: 500
          nullable: true
        minAgeMonths:
          type: integer
          format: int32
          minimum: 0
          nullable: true # null - не менять
        maxAgeMonths:
          type: integer
          format: int32
          minimum: 0
          nullable: true # null - не менять
        targetSpeciesNames:
          type: array
          items:
            type: string
            maxLength: 100
          nullable: true # null - не менять, [] - очистить, [...] - установить
          description: Полный новый список названий целевых видов
        targetBreedNames:
          type: array
          items:
            type: string
            maxLength: 100
          nullable: true # null - не менять, [] - очистить, [...] - установить
          description: Полный новый список названий целевых пород
        ingredientNames:
          type: array
          items:
            type: string
            maxLength: 100
          nullable: true # null - не менять, [] - очистить, [...] - установить
          description: Полный новый список названий ингредиентов

    ReminderCreationRequestDto:
      type: object
      required:
        - type
        - dueDate
        - petId
      properties:
        type:
          type: string
          maxLength: 50
          minLength: 1
        description:
          type: string
          maxLength: 255
          nullable: true
        dueDate:
          type: string
          format: date
          description: Дата должна быть сегодня или в будущем
        petId:
          type: string
          format: uuid

    ReminderUpdateRequestDto:
      type: object
      properties:
        type:
          type: string
          maxLength: 50
          minLength: 1
          nullable: true
        description:
          type: string
          maxLength: 255
          nullable: true
        dueDate:
          type: string
          format: date
          nullable: true
          description: Дата должна быть сегодня или в будущем
        status:
          $ref: '#/components/schemas/ReminderStatus'
          nullable: true

    UserPetCreateRequestDto:
      type: object
      required:
        - name
        - speciesName
      properties:
        name:
          type: string
          maxLength: 100
        birthDate:
          type: string
          format: date
          nullable: true
          description: Дата рождения должна быть сегодня или в прошлом
        speciesName:
          type: string
          maxLength: 50
        breedName:
          type: string
          maxLength: 100
          nullable: true
        allergyNames:
          type: array
          items:
            type: string # Просто массив строк
            maxLength: 100
          description: Список названий аллергий питомца

    UserPetUpdateRequestDto:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          nullable: true
        birthDate:
          type: string
          format: date
          nullable: true
          description: Дата рождения должна быть сегодня или в прошлом
        speciesName:
          type: string
          maxLength: 50
          nullable: true
        breedName:
          type: string
          maxLength: 100
          nullable: true # null - не менять, "" - удалить породу
        allergyNames:
          type: array
          items:
            type: string
            maxLength: 100
          nullable: true # null - не менять, [] - очистить, [...] - установить
          description: Полный новый список названий аллергий питомца

    # --- Error Response ---
    ErrorResponse: # Переименовал для ясности, использовал стандартные поля ProblemDetail
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI reference [RFC3986] that identifies the problem type.
          default: "about:blank"
        title:
          type: string
          description: A short, human-readable summary of the problem type.
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server.
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.

  responses:
    BadRequest:
      description: Некорректный запрос (ошибка валидации и т.п.)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Ресурс не найден
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Доступ запрещен
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NoContent:
      description: Операция успешна, нет содержимого для возврата (для DELETE)
